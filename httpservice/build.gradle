apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.SmartDengg'

def STRING = "String"
def LIBRARY_VERSION = "LIBRARY_VERSION"
def HTTP_LOG_TAG = "HTTP_LOG_TAG"

android {
  compileSdkVersion rootProject.ext.android.compileSdkVersion
  buildToolsVersion rootProject.ext.android.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.android.minSdkVersion
    targetSdkVersion rootProject.ext.android.targetSdkVersion
    versionCode rootProject.ext.android.versionCode
    versionName rootProject.ext.android.versionName

    buildConfigField STRING, HTTP_LOG_TAG, "\"${rootProject.ext.httpLogTAG}\""
    buildConfigField STRING, LIBRARY_VERSION, "\"${rootProject.ext.VERSION_NAME}\""
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    abortOnError false
  }
}

// Trigger BuildConfig creation
project.afterEvaluate {
  tasks.all { task ->
    if (task.name =~ /generate.*BuildConfig/) {
      task.dependsOn(propagateBuildConfig)
    }
  }
}

task propagateBuildConfig << {
  project.android.buildTypes.all {
    type -> type.buildConfigField "boolean", "RELEASE", isVariantRelease().toString()
  }
}

def isVariantRelease() {
  return rootProject.ext.variantRelease
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  /*Google Library*/
  compile rootProject.ext.dependencies.libGson

  /*Square Library*/
  compile rootProject.ext.dependencies.libRetrofit2
  compile rootProject.ext.dependencies.libOkhttp

  /*ReactiveX Library*/
  compile rootProject.ext.dependencies.libRxJava
  compile rootProject.ext.dependencies.libRxAndroid
}
